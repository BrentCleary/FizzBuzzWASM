
<div class="row row-cols-1 row-cols-md-3">
    <div class="col">

        @{
            ListValues = GenerateListValues(StartValue, EndValue);
            newList.AddToList(ListValues);
            DisplayList = newList.GenerateNodeList();
        }
        <div class="m-3 border border-2">
            <div class="m-1 bg-light">@StartValue</div>
            <div class="m-1 bg-gray">@EndValue</div>
        </div>
        <div>
            @foreach (int val in ListValues)
            {
                <div>@val</div>
            } 
        </div>

        <div class="row row-cols-1 row-cols-md-5">
            @if(DisplayList != null)
            {          
                @for (int i = 0; i < DisplayList.Count; i++)
                {
                    <div class="card border border-2 rounded-3 bg-secondary m-3" style="width:150px; height:100px;">

                        <div class="card-header bg-info">Node Value is @DisplayList[i].Data</div>
                        @if(DisplayList[i].Node == null)
                        {
                            <div class="card-body bg-warning">Next is Null</div>
                        }
                        else
                        {
                            <div class="card-body bg-warning">Next Node Value is @DisplayList[i].Node.Data</div>
                        }
                </div>
                }
            }
        </div>


        <div>TEST DIV</div>

@*         @foreach(KeyValuePair<int,Node> kvp in DisplayList)
        {
            <div class="card border border-2 rounded-3 bg-secondary m-3" style="width:150px; height:100px;">
            
                <div class="card-header bg-info">Node Value is @kvp.Key</div>
                @if(kvp.Value != null)
                {
                    <div class="card-body bg-warning">Next Node Value is @kvp.Value.Data</div>
                }
                else
                {
                    <div class="card-body bg-warning">Next is Null</div>
                }
            </div>
        } *@

    </div>
</div>


@code {

    // --------------------- USER VALUES AND LIST GENERATION ------------------

    [Parameter]
    public int StartValue { get; set; }

    [Parameter]
    public int EndValue {get; set; }

    LinkedList newList = new LinkedList();
    public List<int> ListValues { get; set; }

    List<DataContainer<int,Node>> DisplayList = new List<DataContainer<int,Node>>();

    public List<int> GenerateListValues(int startValue, int endValue)
    {
        List<int> result = new List<int>();

        if(startValue != null && endValue != null)
        {
            int valueRange = Math.Abs(endValue - startValue);
            for(int i = 0; i < valueRange; i++)
            {
                result.Add(startValue + i);
            }
        }
        return result;
    }


    // --------------------- NODE AND LINKED LIST GENERATION ------------------

    public class Node
    {
        public int Data { get; set; }
        public Node Next { get; set; }

        public Node(int data)
        {
            this.Data = data;
            this.Next = null;
        }
    }

    public class DataContainer<T1, T2>
    {
        public T1 Data { get; set; }
        public T2? Node { get; set; }

        public DataContainer(T1 data, T2 node)
        {
            Data = data;
            Node = node;
        }
    }

    public class LinkedList
    {
        // Generates the head Node of the Linked List
        public Node Head { get; private set; }


        // Constructor: Sets the head of the list to null
        public LinkedList()
        {
            this.Head = null;
        }

        public void AddLast(int data)
        {
            Node newNode = new Node(data);

            if (Head == null)
            {
                Head = newNode;
            }
            else
            {
                Node current = Head;
                while (current.Next != null)
                {
                    current = current.Next;
                }
                current.Next = newNode;
            }
        }

        public void AddToList(List<int> ListValues)
        {
            if (ListValues != null)
            {
                foreach (int value in ListValues)
                {
                    this.AddLast(value);
                }
            }
        }

        // --------------------- NODE LIST GENERATION ------------------
        public List<DataContainer<int, Node>> GenerateNodeList()
        {
            Node current = this.Head;
            List<DataContainer<int, Node>> NodeList = new();
            while (current != null)
            {

                if(current.Next == null)
                {
                    DataContainer<int, Node?> dataContainer = new DataContainer<int, Node?>(current.Data, null);
                    NodeList.Add(dataContainer);
                    current = current.Next;
                }
                else
                {
                    DataContainer<int, Node> dataContainer = new DataContainer<int, Node>(current.Data, current.Next);
                    NodeList.Add(dataContainer);
                    current = current.Next;
                }
            }

            return NodeList;
        }

    }


}
