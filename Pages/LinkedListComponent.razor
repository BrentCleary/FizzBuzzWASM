
<div class="row row-cols-1 row-cols-md-3">
    <div class="col">

        @{
            ListValues = GenerateListValues(StartValue, EndValue);
            LinkedList newList = new LinkedList();
            newList.AddToList(ListValues);

            DisplayDictionary = LinkedList.GenerateNodeDictionary(newList);
        }

        <div class="card border border-1 rounded-2 bg-secondary" style="width:150; height:300px;">
            {
                <div class="card-header">

                </div>
            }
        </div>
    </div>
</div>


@code {

    // --------------------- USER VALUES AND LIST GENERATION ------------------

    [Parameter]
    public int StartValue { get; set; }

    [Parameter]
    public int EndValue {get; set; }

    [Parameter]
    public List<int> ListValues { get; set; }

    public Dictionary<int, Node> DisplayDictionary = new Dictionary<int, Node>();

    public List<int> GenerateListValues(int startValue, int endValue)
    {
        List<int> result = new List<int>();

        if(startValue != null && endValue != null)
        {
            int valueRange = startValue - endValue;
            for(int i = 0; i < valueRange; i++)
            {
                result.Add(i);
            }
        }
        return result;
    }



    // --------------------- NODE AND LINKED LIST GENERATION ------------------

    public class Node
    {
        public int Data { get; set; }
        public Node Next { get; set; }

        public Node(int data)
        {
            this.Data = data;
            this.Next = null;
        }
    }

    public class LinkedList
    {
        // Generates the head Node of the Linked List
        public Node Head { get; private set; }

        // Constructor: Sets the head of the list to null
        public LinkedList()
        {
            this.Head = null;
        }

        public void AddLast(int data)
        {
            Node newNode = new Node(data);

            if (Head == null)
            {
                Head = newNode;
            }
            else
            {
                Node current = Head;
                while (current.Next != null)
                {
                    current = current.Next;
                }
                current.Next = newNode;
            }
        }

        public void AddToList(List<int> ListValues)
        {
            if (ListValues != null)
            {
                LinkedList linkedList = new LinkedList();

                foreach (int value in ListValues)
                {
                    linkedList.AddLast(value);
                }
            }
        }

        // Method to print the Linked List
        public void PrintList()
        {
            Node current = Head;
            while (current != null)
            {
                Console.Write(current.Data + " ");
                current = current.Next;
            }
            Console.WriteLine();
        }
 
        // --------------------- DICTIONARY GENERATION ------------------


        public Dictionary<int, Node> GenerateNodeDictionary(LinkedList list)
        {
            Dictionary<int, Node> nodeDictionary = new Dictionary<int, Node>();

            Node current = list.Head;
            while (current != null)
            {
                nodeDictionary.Add(current.Data, current.Next);
                current = current.Next;
            }

            return nodeDictionary;
        }

    }


}
